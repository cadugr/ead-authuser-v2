server:
  port: 8087
  servlet:
    context-path: '/ead-authuser/'
  forward-headers-strategy: FRAMEWORK #para jogar os links do hateoas para o api-gateway  
  
spring:
  application:
    name: ead-authuser-service
  datasource:
    url: jdbc:postgresql://localhost:5432/ead-authuser-v2
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.PostgreSQLDialect
      jdbc:
        lob.non-contextual-creation: true
    properties:
      hibernate:
        '[show_sql]': true
  output:
    ansi:
      enabled: always
  rabbitmq:
    addresses: amqps://kgagnkbe:t27bKMPxhk63o4-kDLLcstR2XAaTOVVJ@woodpecker.rmq.cloudamqp.com/kgagnkbe
    
     
logging:
  level:
    '[com.ead]': TRACE
    root: INFO
    '[org.springframework.web]':  DEBUG
    '[org.hibernate]': INFO
    
ead:
  api:
    url:
      course: 'http://ead-course-service/ead-course' #de forma mais dinamica, passamos apenas o id da aplicação que queremos nos conectar e que está registrado no service-registry

eureka:
  client:
    service-url:
      defaultZone: 'http://localhost:8761/eureka' #definicao para que este microservice encontre o service registry
  instance:
    hostname: localhost  #para se registrar fazendo uso de hosts        
    
